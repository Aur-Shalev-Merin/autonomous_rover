<launch>
  <!-- Define a complete transform tree to fix the errors -->
  <node pkg="tf" type="static_transform_publisher" name="map_to_odom" 
        args="0 0 0 0 0 0 map odom 100" />
        
  <node pkg="tf" type="static_transform_publisher" name="odom_to_base" 
        args="0 0 0 0 0 0 odom base_link 100" />
        
  <node pkg="tf" type="static_transform_publisher" name="base_to_camera" 
        args="0 0 0.1 0 0 0 base_link usb_cam 100" />
  
  <!-- Start USB camera -->
  <node name="usb_cam" pkg="usb_cam" type="usb_cam_node" output="screen">
    <param name="video_device" value="/dev/video0" />
    <param name="image_width" value="640" />
    <param name="image_height" value="480" />
    <param name="pixel_format" value="yuyv" />
    <param name="camera_frame_id" value="usb_cam" />
    <param name="io_method" value="mmap" />
  </node>
  
  <!-- Start ORB-SLAM2 -->
  <node name="orb_slam2_mono" pkg="orb_slam2_ros" type="orb_slam2_ros_mono" output="screen">
    <param name="publish_pointcloud" type="bool" value="true" />
    <param name="publish_pose" type="bool" value="true" />
    <param name="publish_tracking_image" type="bool" value="true" />
    <param name="visualize" type="bool" value="true" />
    <param name="localize_only" type="bool" value="false" />
    <param name="reset_map" type="bool" value="true" />
    <param name="load_map" type="bool" value="false" />
    <param name="map_file" type="string" value="map.bin" />
    <param name="voc_file" type="string" value="$(find orb_slam2_ros)/orb_slam2/Vocabulary/ORBvoc.txt" />
    <param name="pointcloud_frame_id" type="string" value="map" />
    <param name="camera_frame_id" type="string" value="usb_cam" />
    <param name="min_num_kf_in_map" type="int" value="3" />
    <param name="/ORBextractor/nFeatures" type="int" value="800" />
    <param name="/ORBextractor/scaleFactor" type="double" value="1.2" />
    <param name="/ORBextractor/nLevels" type="int" value="4" />
    <param name="/ORBextractor/iniThFAST" type="int" value="20" />
    <param name="/ORBextractor/minThFAST" type="int" value="7" />
    <param name="camera_fps" type="int" value="10" />
    <param name="camera_rgb_encoding" type="bool" value="true" />
    <param name="load_calibration_from_cam" type="bool" value="true" />
    <remap from="/camera/image_raw" to="/usb_cam/image_raw" />
    <remap from="/camera/camera_info" to="/usb_cam/camera_info" />
  </node>
  
  <!-- Run octomap server -->
  <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
    <param name="resolution" value="0.05" />
    <param name="frame_id" type="string" value="map" />
    <param name="sensor_model/max_range" value="5.0" />
    <param name="latch" value="true" />
    <param name="pointcloud_min_z" value="0.1" />
    <param name="pointcloud_max_z" value="1.0" />
    <remap from="cloud_in" to="/orb_slam2_mono/map_points" />
  </node>
  
  <!-- Run move_base -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <remap from="map" to="/projected_map" />
    <!-- In your launch file, add this to the move_base node -->
    <param name="controller_patience" value="15.0" />
    <param name="planner_patience" value="15.0" />
    <param name="conservative_reset_dist" value="3.0" />
    <param name="transform_tolerance" value="1.0" />
    <param name="controller_frequency" value="5.0" />
    <rosparam param="global_costmap/transform_tolerance">1.0</rosparam>
    <rosparam param="local_costmap/transform_tolerance">1.0</rosparam>
    <rosparam file="$(find rover_navigation)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find rover_navigation)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find rover_navigation)/config/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find rover_navigation)/config/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find rover_navigation)/config/base_local_planner_params.yaml" command="load" />
  </node>
</launch>
